#!/bin/bash

# Function to set up a reproducible environment for Kotlin
setup_kotlin_environment() {
    echo "Setting up Kotlin environment..."

    # Ensure Gradle Wrapper is present
    if [ ! -f "gradlew" ]; then
        echo "Generating Gradle Wrapper..."
        gradle wrapper
    fi

    # Create Dockerfile for Kotlin
    cat <<EOF > Dockerfile.kotlin
FROM openjdk:11
RUN apt-get update && \
    apt-get install -y wget unzip
RUN wget https://services.gradle.org/distributions/gradle-7.4.2-bin.zip -P /tmp
RUN unzip -d /opt/gradle /tmp/gradle-7.4.2-bin.zip
ENV PATH=/opt/gradle/gradle-7.4.2/bin:\$PATH
WORKDIR /app
COPY . /app
RUN ./gradlew build
EOF

    echo "Kotlin environment setup complete."
}

# Function to set up a reproducible environment for Swift
setup_swift_environment() {
    echo "Setting up Swift environment..."

    # Create Package.swift if not present
    if [ ! -f "Package.swift" ]; then
        echo "Creating Package.swift..."
        cat <<EOF > Package.swift
// swift-tools-version:5.5
import PackageDescription

let package = Package(
    name: "MyProject",
    platforms: [
        .macOS(.v10_15), .iOS(.v13)
    ],
    dependencies: [
        .package(url: "https://github.com/AreaLayer/firebolt-react-native.git", from: "5.4.0")
    ],
    targets: [
        .target(
            name: "Firebolt",
            dependencies: ["Alamofire"]),
    ]
)
EOF
    fi

    # Create Dockerfile for Swift
    cat <<EOF > Dockerfile.swift
FROM swift:5.5
WORKDIR /app
COPY . /app
RUN swift build
EOF

    # Create Fastfile for Fastlane
    if [ ! -d "fastlane" ]; then
        mkdir fastlane
        cat <<EOF > fastlane/Fastfile
default_platform(:ios)

platform :ios do
  desc "Build the app"
  lane :build do
    build_app(scheme: "MyProject")
  end
end
EOF
    fi

    echo "Swift environment setup complete."
}

# Main script execution
main() {
    setup_kotlin_environment
    setup_swift_environment

    echo "Reproducible environments for Kotlin and Swift have been set up."
}

# Execute main function

main
